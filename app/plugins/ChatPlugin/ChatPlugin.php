<?php

class ChatPlugin extends BasePlugin {
    protected string $name = 'chatplugin';
    protected string $version = '1.0.0';
    protected string $description = '–ü–ª–∞–≥–∏–Ω —á–∞—Ç–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏';

    // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã –¥—Ä—É–≥–∏–µ –ø–ª–∞–≥–∏–Ω—ã)
    protected array $dependencies = [];

    // –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã
    protected array $conflicts = [];

    public function initialize(): void {
        error_log("ChatPlugin initialized");

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
        $this->registerRoutes();

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã
        $this->registerTemplatePaths();

    }
    // –ú–µ—Ç–æ–¥—ã-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ö—É–∫–æ–≤ (–±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã)
    public function hook_chat_before_message_send(string $message, array $user): void {
        if (empty(trim($message))) {
            throw new Exception("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
        }

        if (strlen($message) > 1000) {
            throw new Exception("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ");
        }

        error_log("Message validated: " . substr($message, 0, 50));
    }

    public function filter_chat_message_filter(string $message): string {
        // –û—á–∏—â–∞–µ–º –æ—Ç HTML —Ç–µ–≥–æ–≤
        $message = strip_tags($message);

        // –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (strlen($message) > 500) {
            $message = substr($message, 0, 497) . '...';
        }

        return $message;
    }

    public function filter_chat_user_info(array $user): array {
        if (!isset($user['role'])) {
            $user['role'] = 'user';
        }

        if (!isset($user['avatar'])) {
            $user['avatar'] = '/assets/avatars/default.png';
        }

        return $user;
    }
    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—É–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —ç—Ç–æ—Ç –ø–ª–∞–≥–∏–Ω
     */
    public function registerChatHooks(): void {
        $hookManager = Core::getInstance()->getManager('hook');

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ö—É–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –ø–ª–∞–≥–∏–Ω—ã
        $hookManager->registerHook('chat_before_message_send', 'action', '–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç');
        $hookManager->registerHook('chat_after_message_send', 'action', '–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç');
        $hookManager->registerHook('chat_message_filter', 'filter', '–§–∏–ª—å—Ç—Ä –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π');
        $hookManager->registerHook('chat_user_info', 'filter', '–§–∏–ª—å—Ç—Ä –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ');

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–≤–æ–∏—Ö –∂–µ —Ö—É–∫–æ–≤
        $hookManager->addAction('chat_before_message_send', [$this, 'validateMessage']);
        $hookManager->addFilter('chat_message_filter', [$this, 'filterMessageContent']);
        $hookManager->addFilter('chat_user_info', [$this, 'enhanceUserInfo']);
    }

    /**
     * –•—É–∫: –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
     */
    public function validateMessage(string $message, array $user): void {
        if (empty(trim($message))) {
            throw new Exception("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
        }

        if (strlen($message) > 1000) {
            throw new Exception("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ");
        }

        error_log("Message validated: " . substr($message, 0, 50));
    }

    /**
     * –§–∏–ª—å—Ç—Ä: –û—á–∏—Å—Ç–∫–∞ –∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    public function filterMessageContent(string $message): string {
        // –û—á–∏—â–∞–µ–º –æ—Ç HTML —Ç–µ–≥–æ–≤
        $message = strip_tags($message);

        // –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (strlen($message) > 500) {
            $message = substr($message, 0, 497) . '...';
        }

        return $message;
    }

    /**
     * –§–∏–ª—å—Ç—Ä: –î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
     */
    public function enhanceUserInfo(array $user): array {
        if (!isset($user['role'])) {
            $user['role'] = 'user';
        }

        if (!isset($user['avatar'])) {
            $user['avatar'] = '/assets/avatars/default.png';
        }

        return $user;
    }
    private function registerRoutes(): void {
        try {
            $router = Core::getInstance()->getManager('router');

            // API –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —á–∞—Ç–∞
            $router->addRoute('GET', '/chat', 'ChatController@index');
            $router->addRoute('POST', '/chat/send', 'ChatController@sendMessage');
            $router->addRoute('GET', '/chat/messages', 'ChatController@getMessages');
            $router->addRoute('POST', '/chat/delete/{id}', 'ChatController@deleteMessage');

            // –ê–¥–º–∏–Ω—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã
            $router->addRoute('GET', '/admin/chat', 'ChatController@adminDashboard');
            $router->addRoute('POST', '/admin/chat/settings', 'ChatController@saveSettings');

            error_log("ChatPlugin routes registered successfully");
        } catch (Exception $e) {
            error_log("Error registering chat routes: " . $e->getMessage());
        }
    }

    private function registerTemplatePaths(): void {
        try {
            $templateManager = Core::getInstance()->getManager('template');
            $pluginViewsPath = __DIR__ . '/views/';

            $templateManager->addPath($pluginViewsPath, 'plugin');
            error_log("ChatPlugin template paths registered: " . $pluginViewsPath);
        } catch (Exception $e) {
            error_log("Error registering chat template paths: " . $e->getMessage());
        }
    }

    private function registerHooks(): void {
        try {
            $hookManager = Core::getInstance()->getManager('hook');

            // –•—É–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–∂–µ—Ç–∞ —á–∞—Ç–∞ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            $hookManager->addAction('home_after_content', [$this, 'renderChatWidget']);

            // –•—É–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é –≤ –∞–¥–º–∏–Ω–∫—É
            $hookManager->addAction('admin_menu', [$this, 'addAdminMenu']);

            // –•—É–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∏–ª–µ–π
            $hookManager->addAction('page_header', [$this, 'addChatStyles']);

            error_log("ChatPlugin hooks registered successfully");
        } catch (Exception $e) {
            error_log("Error registering chat hooks: " . $e->getMessage());
        }
    }

    private function createTables(): void {
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
        // –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
        error_log("ChatPlugin tables creation would happen here");
    }

    // ========== HOOK METHODS ==========

    public function renderChatWidget(): void {
        try {
            $templateManager = Core::getInstance()->getManager('template');
            echo $templateManager->render('chat/chat_widget', [
                'title' => '–ß–∞—Ç —Å–∏—Å—Ç–µ–º—ã'
            ]);
        } catch (Exception $e) {
            error_log("Error rendering chat widget: " . $e->getMessage());
            // Fallback - –ø—Ä–æ—Å—Ç–æ–π HTML –µ—Å–ª–∏ —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
            echo '
        <div class="chat-widget" style="border:1px solid #ddd; padding:15px; margin:20px 0;">
            <h4>üí¨ –ß–∞—Ç —Å–∏—Å—Ç–µ–º—ã</h4>
            <p>–ß–∞—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</p>
        </div>';
        }
    }

    public function addAdminMenu(): void {
        echo '
        <a href="/admin/chat" class="nav-item">
            <i>üí¨</i> –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–º
        </a>';
    }

    public function addChatStyles(): void {
        echo '
        <style>
            .chat-widget {
                border: 1px solid #ddd;
                border-radius: 8px;
                padding: 15px;
                margin: 20px 0;
                background: #f9f9f9;
            }
            .chat-messages {
                height: 300px;
                overflow-y: auto;
                border: 1px solid #ccc;
                padding: 10px;
                margin-bottom: 10px;
                background: white;
            }
            .chat-input-group {
                display: flex;
                gap: 10px;
            }
            .chat-input {
                flex: 1;
                padding: 8px;
                border: 1px solid #ccc;
                border-radius: 4px;
            }
            .chat-send-btn {
                padding: 8px 15px;
                background: #007bff;
                color: white;
                border: none;
                border-radius: 4px;
                cursor: pointer;
            }
        </style>';
    }

    public function install(): bool {
        error_log("ChatPlugin installation started");

        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        $this->createTables();

        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–ª–∞–≥–∏–Ω
        $pluginManager = Core::getInstance()->getManager('plugin');
        $pluginManager->activatePlugin($this->name);

        error_log("ChatPlugin installed successfully");
        return true;
    }

    public function uninstall(): bool {
        error_log("ChatPlugin uninstallation started");

        // –£–¥–∞–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        // $this->dropTables();

        error_log("ChatPlugin uninstalled successfully");
        return true;
    }
}